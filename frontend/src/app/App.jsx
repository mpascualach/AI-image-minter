import React, { useState, useEffect } from "react";
import ApiKeyModal from "../apikey-modal/ApiKeyModal.jsx";
import Spinner from "../spinner/Spinner.jsx";
import { Button, TextField, Card, CardMedia, FormControl } from "@mui/material";
import RefreshIcon from "@mui/icons-material/Refresh";

import "./App.css";
import testImage from "./assets/test-image.png";

const App = () => {
  const [promptText, setPromptText] = useState("");
  const [loading, setLoading] = useState(false);
  // const [imageUrls, setImageUrls] = useState([]);
  const [apiResponseData, setApiResponseData] = useState(null);

  const [apiKey, setApiKey] = useState("");
  const [modalOpen, setModalOpen] = useState(true);

  const handleInputChange = (event) => {
    // console.log("API key currently: ", apiKey);
    setPromptText(event.target.value);
  };

  useEffect(() => {
    setApiKey(import.meta.env.VITE_REACT_APP_DALLE_API_KEY);
    //simulateApiResponse();
    // setLoading(true);
  }, []);

  const handleSubmit = () => {
    // event.preventDefault();
    setLoading(true);
    const apiUrl = `https://api.openai.com/v1/images/generations`;
    const requestOptions = {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${apiKey}`,
      },
      body: JSON.stringify({ prompt: promptText }),
    };

    // console.log("API key was: ", apiKey);

    fetch(apiUrl, requestOptions)
      .then((response) => response.json())
      .then((data) => {
        if (data.data[0]) {
          data.data[0].promptText = promptText;
          data.data[0].generatedBy = "Dall-E";
          data.data[0].apiUsed = apiUrl || "none";

          setApiResponseData(data.data[0]);
        }
        // console.log("API data loaded: ", JSON.stringify(data));
        setLoading(false);
        //setImageUrls(data.data.map((item) => item.url));
      })
      .catch((error) => {
        console.error("Error:", error);
        setLoading(false);
      });
  };

  const handleModalSubmit = (key) => {
    setApiKey(key);
    setModalOpen(false);
  };

  // Sample API response
  const sampleResponse = {
    created: 1688203383,
    data: [
      {
        url: testImage,
        promptText: "Belgrade by midnight",
        generatedBy: "Dall-E",
      },
    ],
  };

  const simulateApiResponse = () => {
    setLoading(true);
    setTimeout(() => {
      setLoading(false);
      setApiResponseData(sampleResponse.data[0]);
      console.log(apiResponseData);
      //setImageUrls(sampleResponse.data.map((item) => item.url));
    }, 2000);
  };

  const handleTestApi = () => {
    simulateApiResponse();
  };

  // useEffect(() => {
  //   simulateApiResponse();
  // }, []);

  const restartForm = () => {
    setApiResponseData(null);
    setLoading(false);
  };

  return (
    <>
      <ApiKeyModal
        isOpen={modalOpen}
        onClose={() => setModalOpen(false)}
        onSubmit={handleModalSubmit}
      />

      <div className="testRunContainer">
        <Button className="testRunButton" onClick={handleTestApi}>
          Test run
        </Button>
      </div>

      <form onSubmit={handleSubmit}>
        {loading ? (
          <Spinner />
        ) : apiResponseData ? (
          <>
            <Card variant="outlined" sx={{ height: 600, width: 600 }}>
              <CardMedia
                image={apiResponseData.url}
                sx={{ height: 600, width: 600 }}
                style={{ position: "relative" }}
              >
                <Card className="textCard">
                  <h2 className="imageTitle">{apiResponseData.promptText}</h2>
                </Card>

                <Card className="textCard generatedByCard">
                  <p className="generatedBy">
                    Generated by: {apiResponseData.generatedBy}
                  </p>
                </Card>

                <Button className="refreshButton" onClick={() => restartForm()}>
                  <RefreshIcon></RefreshIcon>
                </Button>

                <Button
                  className="signButton"
                  color="success"
                  variant="contained"
                >
                  Sign as NFT
                </Button>
              </CardMedia>
            </Card>
          </>
        ) : (
          <div style={{ display: "flex", flexDirection: "column" }}>
            <TextField
              autoFocus
              margin="normal"
              textColor="white"
              id="prompt"
              label="Prompt"
              fullWidth
              value={promptText}
              onChange={handleInputChange}
            />
            <Button
              color="success"
              variant="contained"
              onClick={() => handleSubmit(promptText)}
            >
              Enter prompt
            </Button>
          </div>
        )}
      </form>
    </>
  );
};

export default App;
